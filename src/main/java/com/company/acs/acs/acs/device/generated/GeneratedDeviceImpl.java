package com.company.acs.acs.acs.device.generated;

import com.company.acs.acs.acs.device.Device;
import com.company.acs.acs.acs.location.Location;
import com.company.acs.acs.acs.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.device.Device}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDeviceImpl implements Device {
    
    private int deviceId;
    private String mac;
    private String alias;
    private Integer deviceLocation;
    private Integer deviceUser;
    
    protected GeneratedDeviceImpl() {}
    
    @Override
    public int getDeviceId() {
        return deviceId;
    }
    
    @Override
    public String getMac() {
        return mac;
    }
    
    @Override
    public String getAlias() {
        return alias;
    }
    
    @Override
    public OptionalInt getDeviceLocation() {
        return OptionalUtil.ofNullable(deviceLocation);
    }
    
    @Override
    public OptionalInt getDeviceUser() {
        return OptionalUtil.ofNullable(deviceUser);
    }
    
    @Override
    public Device setDeviceId(int deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    
    @Override
    public Device setMac(String mac) {
        this.mac = mac;
        return this;
    }
    
    @Override
    public Device setAlias(String alias) {
        this.alias = alias;
        return this;
    }
    
    @Override
    public Device setDeviceLocation(Integer deviceLocation) {
        this.deviceLocation = deviceLocation;
        return this;
    }
    
    @Override
    public Device setDeviceUser(Integer deviceUser) {
        this.deviceUser = deviceUser;
        return this;
    }
    
    @Override
    public Location findDeviceId(Manager<Location> foreignManager) {
        return foreignManager.stream().filter(Location.LOCATION_ID.equal(getDeviceId())).findAny().orElse(null);
    }
    
    @Override
    public Optional<User> findDeviceUser(Manager<User> foreignManager) {
        if (getDeviceUser().isPresent()) {
            return foreignManager.stream().filter(User.USER_ID.equal(getDeviceUser().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("deviceId = "       + Objects.toString(getDeviceId()));
        sj.add("mac = "            + Objects.toString(getMac()));
        sj.add("alias = "          + Objects.toString(getAlias()));
        sj.add("deviceLocation = " + Objects.toString(OptionalUtil.unwrap(getDeviceLocation())));
        sj.add("deviceUser = "     + Objects.toString(OptionalUtil.unwrap(getDeviceUser())));
        return "DeviceImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Device)) { return false; }
        final Device thatDevice = (Device)that;
        if (this.getDeviceId() != thatDevice.getDeviceId()) { return false; }
        if (!Objects.equals(this.getMac(), thatDevice.getMac())) { return false; }
        if (!Objects.equals(this.getAlias(), thatDevice.getAlias())) { return false; }
        if (!Objects.equals(this.getDeviceLocation(), thatDevice.getDeviceLocation())) { return false; }
        if (!Objects.equals(this.getDeviceUser(), thatDevice.getDeviceUser())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getDeviceId());
        hash = 31 * hash + Objects.hashCode(getMac());
        hash = 31 * hash + Objects.hashCode(getAlias());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDeviceLocation()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDeviceUser()));
        return hash;
    }
}