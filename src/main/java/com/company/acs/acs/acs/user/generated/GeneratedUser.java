package com.company.acs.acs.acs.user.generated;

import com.company.acs.acs.acs.user.User;
import com.company.acs.acs.acs.usergroup.UserGroup;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.user.User}-interface representing entities of the
 * {@code User}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUserId()} method.
     */
    IntField<User, Integer> USER_ID = IntField.create(
        Identifier.USER_ID,
        User::getUserId,
        User::setUserId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFirstName()} method.
     */
    StringField<User, String> FIRST_NAME = StringField.create(
        Identifier.FIRST_NAME,
        User::getFirstName,
        User::setFirstName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getLastName()} method.
     */
    StringField<User, String> LAST_NAME = StringField.create(
        Identifier.LAST_NAME,
        User::getLastName,
        User::setLastName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUserName()} method.
     */
    StringField<User, String> USER_NAME = StringField.create(
        Identifier.USER_NAME,
        User::getUserName,
        User::setUserName,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUserPassword()} method.
     */
    StringField<User, String> USER_PASSWORD = StringField.create(
        Identifier.USER_PASSWORD,
        User::getUserPassword,
        User::setUserPassword,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUserUsergroupId()} method.
     */
    ComparableForeignKeyField<User, Integer, Integer, UserGroup> USER_USERGROUP_ID = ComparableForeignKeyField.create(
        Identifier.USER_USERGROUP_ID,
        o -> OptionalUtil.unwrap(o.getUserUsergroupId()),
        User::setUserUsergroupId,
        UserGroup.USERGROUP_ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the userId of this User. The userId field corresponds to the
     * database column ACS.ACS.User.userId.
     * 
     * @return the userId of this User
     */
    int getUserId();
    
    /**
     * Returns the firstName of this User. The firstName field corresponds to
     * the database column ACS.ACS.User.firstName.
     * 
     * @return the firstName of this User
     */
    String getFirstName();
    
    /**
     * Returns the lastName of this User. The lastName field corresponds to the
     * database column ACS.ACS.User.LastName.
     * 
     * @return the lastName of this User
     */
    String getLastName();
    
    /**
     * Returns the userName of this User. The userName field corresponds to the
     * database column ACS.ACS.User.userName.
     * 
     * @return the userName of this User
     */
    String getUserName();
    
    /**
     * Returns the userPassword of this User. The userPassword field corresponds
     * to the database column ACS.ACS.User.userPassword.
     * 
     * @return the userPassword of this User
     */
    String getUserPassword();
    
    /**
     * Returns the userUsergroupId of this User. The userUsergroupId field
     * corresponds to the database column ACS.ACS.User.user_usergroupId.
     * 
     * @return the userUsergroupId of this User
     */
    OptionalInt getUserUsergroupId();
    
    /**
     * Sets the userId of this User. The userId field corresponds to the
     * database column ACS.ACS.User.userId.
     * 
     * @param userId to set of this User
     * @return       this User instance
     */
    User setUserId(int userId);
    
    /**
     * Sets the firstName of this User. The firstName field corresponds to the
     * database column ACS.ACS.User.firstName.
     * 
     * @param firstName to set of this User
     * @return          this User instance
     */
    User setFirstName(String firstName);
    
    /**
     * Sets the lastName of this User. The lastName field corresponds to the
     * database column ACS.ACS.User.LastName.
     * 
     * @param lastName to set of this User
     * @return         this User instance
     */
    User setLastName(String lastName);
    
    /**
     * Sets the userName of this User. The userName field corresponds to the
     * database column ACS.ACS.User.userName.
     * 
     * @param userName to set of this User
     * @return         this User instance
     */
    User setUserName(String userName);
    
    /**
     * Sets the userPassword of this User. The userPassword field corresponds to
     * the database column ACS.ACS.User.userPassword.
     * 
     * @param userPassword to set of this User
     * @return             this User instance
     */
    User setUserPassword(String userPassword);
    
    /**
     * Sets the userUsergroupId of this User. The userUsergroupId field
     * corresponds to the database column ACS.ACS.User.user_usergroupId.
     * 
     * @param userUsergroupId to set of this User
     * @return                this User instance
     */
    User setUserUsergroupId(Integer userUsergroupId);
    
    /**
     * Queries the specified manager for the referenced UserGroup. If no such
     * UserGroup exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<UserGroup> findUserUsergroupId(Manager<UserGroup> foreignManager);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        USER_ID           ("userId"),
        FIRST_NAME        ("firstName"),
        LAST_NAME         ("LastName"),
        USER_NAME         ("userName"),
        USER_PASSWORD     ("userPassword"),
        USER_USERGROUP_ID ("user_usergroupId");
        
        private final String columnId;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "User";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}