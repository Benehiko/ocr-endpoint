package com.company.acs.acs.acs.moderator.generated;

import com.company.acs.acs.acs.moderator.Moderator;
import com.company.acs.acs.acs.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.moderator.Moderator}-interface representing entities
 * of the {@code Moderator}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedModerator {
    
    /**
     * This Field corresponds to the {@link Moderator} field that can be
     * obtained using the {@link Moderator#getModeratorId()} method.
     */
    IntField<Moderator, Integer> MODERATOR_ID = IntField.create(
        Identifier.MODERATOR_ID,
        Moderator::getModeratorId,
        Moderator::setModeratorId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Moderator} field that can be
     * obtained using the {@link Moderator#getUsersUserId()} method.
     */
    IntForeignKeyField<Moderator, Integer, User> USERS_USER_ID = IntForeignKeyField.create(
        Identifier.USERS_USER_ID,
        Moderator::getUsersUserId,
        Moderator::setUsersUserId,
        User.USER_ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the moderatorId of this Moderator. The moderatorId field
     * corresponds to the database column ACS.ACS.Moderator.moderatorId.
     * 
     * @return the moderatorId of this Moderator
     */
    int getModeratorId();
    
    /**
     * Returns the usersUserId of this Moderator. The usersUserId field
     * corresponds to the database column ACS.ACS.Moderator.Users_userId.
     * 
     * @return the usersUserId of this Moderator
     */
    int getUsersUserId();
    
    /**
     * Sets the moderatorId of this Moderator. The moderatorId field corresponds
     * to the database column ACS.ACS.Moderator.moderatorId.
     * 
     * @param moderatorId to set of this Moderator
     * @return            this Moderator instance
     */
    Moderator setModeratorId(int moderatorId);
    
    /**
     * Sets the usersUserId of this Moderator. The usersUserId field corresponds
     * to the database column ACS.ACS.Moderator.Users_userId.
     * 
     * @param usersUserId to set of this Moderator
     * @return            this Moderator instance
     */
    Moderator setUsersUserId(int usersUserId);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUsersUserId(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Moderator> {
        
        MODERATOR_ID  ("moderatorId"),
        USERS_USER_ID ("Users_userId");
        
        private final String columnId;
        private final TableIdentifier<Moderator> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "Moderator";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Moderator> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}