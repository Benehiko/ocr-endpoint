package com.company.acs.acs.acs.userauth.generated;

import com.company.acs.acs.acs.userauth.UserAuth;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.userauth.UserAuth}-interface representing entities of
 * the {@code UserAuth}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserAuth {
    
    /**
     * This Field corresponds to the {@link UserAuth} field that can be obtained
     * using the {@link UserAuth#getAuthId()} method.
     */
    IntField<UserAuth, Integer> AUTH_ID = IntField.create(
        Identifier.AUTH_ID,
        UserAuth::getAuthId,
        UserAuth::setAuthId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link UserAuth} field that can be obtained
     * using the {@link UserAuth#getUsername()} method.
     */
    StringField<UserAuth, String> USERNAME = StringField.create(
        Identifier.USERNAME,
        UserAuth::getUsername,
        UserAuth::setUsername,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link UserAuth} field that can be obtained
     * using the {@link UserAuth#getHash()} method.
     */
    StringField<UserAuth, String> HASH = StringField.create(
        Identifier.HASH,
        UserAuth::getHash,
        UserAuth::setHash,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAuth} field that can be obtained
     * using the {@link UserAuth#getSalt()} method.
     */
    StringField<UserAuth, String> SALT = StringField.create(
        Identifier.SALT,
        UserAuth::getSalt,
        UserAuth::setSalt,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the authId of this UserAuth. The authId field corresponds to the
     * database column ACS.ACS.UserAuth.authId.
     * 
     * @return the authId of this UserAuth
     */
    int getAuthId();
    
    /**
     * Returns the username of this UserAuth. The username field corresponds to
     * the database column ACS.ACS.UserAuth.username.
     * 
     * @return the username of this UserAuth
     */
    String getUsername();
    
    /**
     * Returns the hash of this UserAuth. The hash field corresponds to the
     * database column ACS.ACS.UserAuth.hash.
     * 
     * @return the hash of this UserAuth
     */
    String getHash();
    
    /**
     * Returns the salt of this UserAuth. The salt field corresponds to the
     * database column ACS.ACS.UserAuth.salt.
     * 
     * @return the salt of this UserAuth
     */
    String getSalt();
    
    /**
     * Sets the authId of this UserAuth. The authId field corresponds to the
     * database column ACS.ACS.UserAuth.authId.
     * 
     * @param authId to set of this UserAuth
     * @return       this UserAuth instance
     */
    UserAuth setAuthId(int authId);
    
    /**
     * Sets the username of this UserAuth. The username field corresponds to the
     * database column ACS.ACS.UserAuth.username.
     * 
     * @param username to set of this UserAuth
     * @return         this UserAuth instance
     */
    UserAuth setUsername(String username);
    
    /**
     * Sets the hash of this UserAuth. The hash field corresponds to the
     * database column ACS.ACS.UserAuth.hash.
     * 
     * @param hash to set of this UserAuth
     * @return     this UserAuth instance
     */
    UserAuth setHash(String hash);
    
    /**
     * Sets the salt of this UserAuth. The salt field corresponds to the
     * database column ACS.ACS.UserAuth.salt.
     * 
     * @param salt to set of this UserAuth
     * @return     this UserAuth instance
     */
    UserAuth setSalt(String salt);
    
    enum Identifier implements ColumnIdentifier<UserAuth> {
        
        AUTH_ID  ("authId"),
        USERNAME ("username"),
        HASH     ("hash"),
        SALT     ("salt");
        
        private final String columnId;
        private final TableIdentifier<UserAuth> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "UserAuth";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserAuth> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}