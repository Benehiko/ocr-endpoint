package com.company.acs.acs.acs.image.generated;

import com.company.acs.acs.acs.image.Image;
import com.company.acs.acs.acs.image.ImageImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link com.company.acs.acs.acs.image.Image}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedImageSqlAdapter implements SqlAdapter<Image> {
    
    private final TableIdentifier<Image> tableIdentifier;
    
    protected GeneratedImageSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ACS", "ACS", "Image");
    }
    
    protected Image apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setImageId(     resultSet.getInt(1 + offset))
            .setImage(       resultSet.getBlob(2 + offset))
            .setTimeStamp(   resultSet.getTimestamp(3 + offset))
            .setImageDevice( resultSet.getInt(4 + offset))
            ;
    }
    
    protected ImageImpl createEntity() {
        return new ImageImpl();
    }
    
    @Override
    public TableIdentifier<Image> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Image> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Image> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}