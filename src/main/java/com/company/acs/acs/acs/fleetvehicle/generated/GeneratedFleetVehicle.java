package com.company.acs.acs.acs.fleetvehicle.generated;

import com.company.acs.acs.acs.fleetvehicle.FleetVehicle;
import com.company.acs.acs.acs.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.fleetvehicle.FleetVehicle}-interface representing
 * entities of the {@code FleetVehicle}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedFleetVehicle {
    
    /**
     * This Field corresponds to the {@link FleetVehicle} field that can be
     * obtained using the {@link FleetVehicle#getVehicleId()} method.
     */
    IntField<FleetVehicle, Integer> VEHICLE_ID = IntField.create(
        Identifier.VEHICLE_ID,
        FleetVehicle::getVehicleId,
        FleetVehicle::setVehicleId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link FleetVehicle} field that can be
     * obtained using the {@link FleetVehicle#getNumberplate()} method.
     */
    StringField<FleetVehicle, String> NUMBERPLATE = StringField.create(
        Identifier.NUMBERPLATE,
        FleetVehicle::getNumberplate,
        FleetVehicle::setNumberplate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link FleetVehicle} field that can be
     * obtained using the {@link FleetVehicle#getFleetUser()} method.
     */
    ComparableForeignKeyField<FleetVehicle, Integer, Integer, User> FLEET_USER = ComparableForeignKeyField.create(
        Identifier.FLEET_USER,
        o -> OptionalUtil.unwrap(o.getFleetUser()),
        FleetVehicle::setFleetUser,
        User.USER_ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the vehicleId of this FleetVehicle. The vehicleId field
     * corresponds to the database column ACS.ACS.FleetVehicle.vehicleId.
     * 
     * @return the vehicleId of this FleetVehicle
     */
    int getVehicleId();
    
    /**
     * Returns the numberplate of this FleetVehicle. The numberplate field
     * corresponds to the database column ACS.ACS.FleetVehicle.numberplate.
     * 
     * @return the numberplate of this FleetVehicle
     */
    String getNumberplate();
    
    /**
     * Returns the fleetUser of this FleetVehicle. The fleetUser field
     * corresponds to the database column ACS.ACS.FleetVehicle.fleet_user.
     * 
     * @return the fleetUser of this FleetVehicle
     */
    OptionalInt getFleetUser();
    
    /**
     * Sets the vehicleId of this FleetVehicle. The vehicleId field corresponds
     * to the database column ACS.ACS.FleetVehicle.vehicleId.
     * 
     * @param vehicleId to set of this FleetVehicle
     * @return          this FleetVehicle instance
     */
    FleetVehicle setVehicleId(int vehicleId);
    
    /**
     * Sets the numberplate of this FleetVehicle. The numberplate field
     * corresponds to the database column ACS.ACS.FleetVehicle.numberplate.
     * 
     * @param numberplate to set of this FleetVehicle
     * @return            this FleetVehicle instance
     */
    FleetVehicle setNumberplate(String numberplate);
    
    /**
     * Sets the fleetUser of this FleetVehicle. The fleetUser field corresponds
     * to the database column ACS.ACS.FleetVehicle.fleet_user.
     * 
     * @param fleetUser to set of this FleetVehicle
     * @return          this FleetVehicle instance
     */
    FleetVehicle setFleetUser(Integer fleetUser);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<User> findFleetUser(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<FleetVehicle> {
        
        VEHICLE_ID  ("vehicleId"),
        NUMBERPLATE ("numberplate"),
        FLEET_USER  ("fleet_user");
        
        private final String columnId;
        private final TableIdentifier<FleetVehicle> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "FleetVehicle";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<FleetVehicle> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}