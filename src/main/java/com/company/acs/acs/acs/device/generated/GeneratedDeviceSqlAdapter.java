package com.company.acs.acs.acs.device.generated;

import com.company.acs.acs.acs.device.Device;
import com.company.acs.acs.acs.device.DeviceImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link com.company.acs.acs.acs.device.Device}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedDeviceSqlAdapter implements SqlAdapter<Device> {
    
    private final TableIdentifier<Device> tableIdentifier;
    
    protected GeneratedDeviceSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ACS", "ACS", "Device");
    }
    
    protected Device apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setDeviceId(       resultSet.getInt(1 + offset))
            .setMac(            resultSet.getString(2 + offset))
            .setAlias(          resultSet.getString(3 + offset))
            .setDeviceLocation( getInt(resultSet, 4 + offset))
            .setDeviceUser(     getInt(resultSet, 5 + offset))
            ;
    }
    
    protected DeviceImpl createEntity() {
        return new DeviceImpl();
    }
    
    @Override
    public TableIdentifier<Device> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Device> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Device> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}