package com.company.acs.acs.acs.numberplate.generated;

import com.company.acs.acs.acs.image.Image;
import com.company.acs.acs.acs.numberplate.Numberplate;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.numberplate.Numberplate}-interface representing
 * entities of the {@code Numberplate}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedNumberplate {
    
    /**
     * This Field corresponds to the {@link Numberplate} field that can be
     * obtained using the {@link Numberplate#getNumberplateId()} method.
     */
    IntField<Numberplate, Integer> NUMBERPLATE_ID = IntField.create(
        Identifier.NUMBERPLATE_ID,
        Numberplate::getNumberplateId,
        Numberplate::setNumberplateId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Numberplate} field that can be
     * obtained using the {@link Numberplate#getNumberplatestring()} method.
     */
    StringField<Numberplate, String> NUMBERPLATESTRING = StringField.create(
        Identifier.NUMBERPLATESTRING,
        Numberplate::getNumberplatestring,
        Numberplate::setNumberplatestring,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Numberplate} field that can be
     * obtained using the {@link Numberplate#getTime()} method.
     */
    ComparableField<Numberplate, Timestamp, Timestamp> TIME = ComparableField.create(
        Identifier.TIME,
        Numberplate::getTime,
        Numberplate::setTime,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Numberplate} field that can be
     * obtained using the {@link Numberplate#getNumberplateImage()} method.
     */
    IntForeignKeyField<Numberplate, Integer, Image> NUMBERPLATE_IMAGE = IntForeignKeyField.create(
        Identifier.NUMBERPLATE_IMAGE,
        Numberplate::getNumberplateImage,
        Numberplate::setNumberplateImage,
        Image.IMAGE_ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the numberplateId of this Numberplate. The numberplateId field
     * corresponds to the database column ACS.ACS.Numberplate.numberplateId.
     * 
     * @return the numberplateId of this Numberplate
     */
    int getNumberplateId();
    
    /**
     * Returns the numberplatestring of this Numberplate. The numberplatestring
     * field corresponds to the database column
     * ACS.ACS.Numberplate.numberplatestring.
     * 
     * @return the numberplatestring of this Numberplate
     */
    String getNumberplatestring();
    
    /**
     * Returns the time of this Numberplate. The time field corresponds to the
     * database column ACS.ACS.Numberplate.time.
     * 
     * @return the time of this Numberplate
     */
    Timestamp getTime();
    
    /**
     * Returns the numberplateImage of this Numberplate. The numberplateImage
     * field corresponds to the database column
     * ACS.ACS.Numberplate.numberplate_image.
     * 
     * @return the numberplateImage of this Numberplate
     */
    int getNumberplateImage();
    
    /**
     * Sets the numberplateId of this Numberplate. The numberplateId field
     * corresponds to the database column ACS.ACS.Numberplate.numberplateId.
     * 
     * @param numberplateId to set of this Numberplate
     * @return              this Numberplate instance
     */
    Numberplate setNumberplateId(int numberplateId);
    
    /**
     * Sets the numberplatestring of this Numberplate. The numberplatestring
     * field corresponds to the database column
     * ACS.ACS.Numberplate.numberplatestring.
     * 
     * @param numberplatestring to set of this Numberplate
     * @return                  this Numberplate instance
     */
    Numberplate setNumberplatestring(String numberplatestring);
    
    /**
     * Sets the time of this Numberplate. The time field corresponds to the
     * database column ACS.ACS.Numberplate.time.
     * 
     * @param time to set of this Numberplate
     * @return     this Numberplate instance
     */
    Numberplate setTime(Timestamp time);
    
    /**
     * Sets the numberplateImage of this Numberplate. The numberplateImage field
     * corresponds to the database column ACS.ACS.Numberplate.numberplate_image.
     * 
     * @param numberplateImage to set of this Numberplate
     * @return                 this Numberplate instance
     */
    Numberplate setNumberplateImage(int numberplateImage);
    
    /**
     * Queries the specified manager for the referenced Image. If no such Image
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Image findNumberplateImage(Manager<Image> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Numberplate> {
        
        NUMBERPLATE_ID    ("numberplateId"),
        NUMBERPLATESTRING ("numberplatestring"),
        TIME              ("time"),
        NUMBERPLATE_IMAGE ("numberplate_image");
        
        private final String columnId;
        private final TableIdentifier<Numberplate> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "Numberplate";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Numberplate> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}