package com.company.acs.acs.acs.user.generated;

import com.company.acs.acs.acs.user.User;
import com.company.acs.acs.acs.usergroup.UserGroup;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.user.User}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserImpl implements User {
    
    private int userId;
    private String firstName;
    private String lastName;
    private String userName;
    private Integer userUsergroupId;
    
    protected GeneratedUserImpl() {}
    
    @Override
    public int getUserId() {
        return userId;
    }
    
    @Override
    public String getFirstName() {
        return firstName;
    }
    
    @Override
    public String getLastName() {
        return lastName;
    }
    
    @Override
    public String getUserName() {
        return userName;
    }
    
    @Override
    public OptionalInt getUserUsergroupId() {
        return OptionalUtil.ofNullable(userUsergroupId);
    }
    
    @Override
    public User setUserId(int userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public User setFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    @Override
    public User setLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public User setUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    @Override
    public User setUserUsergroupId(Integer userUsergroupId) {
        this.userUsergroupId = userUsergroupId;
        return this;
    }
    
    @Override
    public Optional<UserGroup> findUserUsergroupId(Manager<UserGroup> foreignManager) {
        if (getUserUsergroupId().isPresent()) {
            return foreignManager.stream().filter(UserGroup.USERGROUP_ID.equal(getUserUsergroupId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("userId = "          + Objects.toString(getUserId()));
        sj.add("firstName = "       + Objects.toString(getFirstName()));
        sj.add("lastName = "        + Objects.toString(getLastName()));
        sj.add("userName = "        + Objects.toString(getUserName()));
        sj.add("userUsergroupId = " + Objects.toString(OptionalUtil.unwrap(getUserUsergroupId())));
        return "UserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof User)) { return false; }
        final User thatUser = (User)that;
        if (this.getUserId() != thatUser.getUserId()) { return false; }
        if (!Objects.equals(this.getFirstName(), thatUser.getFirstName())) { return false; }
        if (!Objects.equals(this.getLastName(), thatUser.getLastName())) { return false; }
        if (!Objects.equals(this.getUserName(), thatUser.getUserName())) { return false; }
        if (!Objects.equals(this.getUserUsergroupId(), thatUser.getUserUsergroupId())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getUserId());
        hash = 31 * hash + Objects.hashCode(getFirstName());
        hash = 31 * hash + Objects.hashCode(getLastName());
        hash = 31 * hash + Objects.hashCode(getUserName());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUserUsergroupId()));
        return hash;
    }
}