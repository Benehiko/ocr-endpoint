package com.company.acs.acs.acs.userauth2.generated;

import com.company.acs.acs.acs.user.User;
import com.company.acs.acs.acs.userauth2.UserAuth2;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.userauth2.UserAuth2}-interface representing entities
 * of the {@code UserAuth2}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserAuth2 {
    
    /**
     * This Field corresponds to the {@link UserAuth2} field that can be
     * obtained using the {@link UserAuth2#getAuthId()} method.
     */
    IntField<UserAuth2, Integer> AUTH_ID = IntField.create(
        Identifier.AUTH_ID,
        UserAuth2::getAuthId,
        UserAuth2::setAuthId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link UserAuth2} field that can be
     * obtained using the {@link UserAuth2#getAuthUserId()} method.
     */
    IntForeignKeyField<UserAuth2, Integer, User> AUTH_USER_ID = IntForeignKeyField.create(
        Identifier.AUTH_USER_ID,
        UserAuth2::getAuthUserId,
        UserAuth2::setAuthUserId,
        User.USER_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAuth2} field that can be
     * obtained using the {@link UserAuth2#getHash()} method.
     */
    StringField<UserAuth2, String> HASH = StringField.create(
        Identifier.HASH,
        UserAuth2::getHash,
        UserAuth2::setHash,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserAuth2} field that can be
     * obtained using the {@link UserAuth2#getSalt()} method.
     */
    StringField<UserAuth2, String> SALT = StringField.create(
        Identifier.SALT,
        UserAuth2::getSalt,
        UserAuth2::setSalt,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the authId of this UserAuth2. The authId field corresponds to the
     * database column ACS.ACS.UserAuth2.authId.
     * 
     * @return the authId of this UserAuth2
     */
    int getAuthId();
    
    /**
     * Returns the authUserId of this UserAuth2. The authUserId field
     * corresponds to the database column ACS.ACS.UserAuth2.auth_userId.
     * 
     * @return the authUserId of this UserAuth2
     */
    int getAuthUserId();
    
    /**
     * Returns the hash of this UserAuth2. The hash field corresponds to the
     * database column ACS.ACS.UserAuth2.hash.
     * 
     * @return the hash of this UserAuth2
     */
    String getHash();
    
    /**
     * Returns the salt of this UserAuth2. The salt field corresponds to the
     * database column ACS.ACS.UserAuth2.salt.
     * 
     * @return the salt of this UserAuth2
     */
    String getSalt();
    
    /**
     * Sets the authId of this UserAuth2. The authId field corresponds to the
     * database column ACS.ACS.UserAuth2.authId.
     * 
     * @param authId to set of this UserAuth2
     * @return       this UserAuth2 instance
     */
    UserAuth2 setAuthId(int authId);
    
    /**
     * Sets the authUserId of this UserAuth2. The authUserId field corresponds
     * to the database column ACS.ACS.UserAuth2.auth_userId.
     * 
     * @param authUserId to set of this UserAuth2
     * @return           this UserAuth2 instance
     */
    UserAuth2 setAuthUserId(int authUserId);
    
    /**
     * Sets the hash of this UserAuth2. The hash field corresponds to the
     * database column ACS.ACS.UserAuth2.hash.
     * 
     * @param hash to set of this UserAuth2
     * @return     this UserAuth2 instance
     */
    UserAuth2 setHash(String hash);
    
    /**
     * Sets the salt of this UserAuth2. The salt field corresponds to the
     * database column ACS.ACS.UserAuth2.salt.
     * 
     * @param salt to set of this UserAuth2
     * @return     this UserAuth2 instance
     */
    UserAuth2 setSalt(String salt);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findAuthUserId(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UserAuth2> {
        
        AUTH_ID      ("authId"),
        AUTH_USER_ID ("auth_userId"),
        HASH         ("hash"),
        SALT         ("salt");
        
        private final String columnId;
        private final TableIdentifier<UserAuth2> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "UserAuth2";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserAuth2> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}