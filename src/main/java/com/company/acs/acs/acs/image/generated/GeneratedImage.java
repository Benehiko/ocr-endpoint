package com.company.acs.acs.acs.image.generated;

import com.company.acs.acs.acs.device.Device;
import com.company.acs.acs.acs.image.Image;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.ReferenceField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.image.Image}-interface representing entities of the
 * {@code Image}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedImage {
    
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getImageId()} method.
     */
    IntField<Image, Integer> IMAGE_ID = IntField.create(
        Identifier.IMAGE_ID,
        Image::getImageId,
        Image::setImageId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getImage()} method.
     */
    ReferenceField<Image, Blob, Blob> IMAGE = ReferenceField.create(
        Identifier.IMAGE,
        Image::getImage,
        Image::setImage,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getTimeStamp()} method.
     */
    ComparableField<Image, Timestamp, Timestamp> TIME_STAMP = ComparableField.create(
        Identifier.TIME_STAMP,
        Image::getTimeStamp,
        Image::setTimeStamp,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Image} field that can be obtained
     * using the {@link Image#getImageDevice()} method.
     */
    ComparableForeignKeyField<Image, Integer, Integer, Device> IMAGE_DEVICE = ComparableForeignKeyField.create(
        Identifier.IMAGE_DEVICE,
        o -> OptionalUtil.unwrap(o.getImageDevice()),
        Image::setImageDevice,
        Device.DEVICE_ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the imageId of this Image. The imageId field corresponds to the
     * database column ACS.ACS.Image.imageId.
     * 
     * @return the imageId of this Image
     */
    int getImageId();
    
    /**
     * Returns the image of this Image. The image field corresponds to the
     * database column ACS.ACS.Image.image.
     * 
     * @return the image of this Image
     */
    Blob getImage();
    
    /**
     * Returns the timeStamp of this Image. The timeStamp field corresponds to
     * the database column ACS.ACS.Image.timeStamp.
     * 
     * @return the timeStamp of this Image
     */
    Timestamp getTimeStamp();
    
    /**
     * Returns the imageDevice of this Image. The imageDevice field corresponds
     * to the database column ACS.ACS.Image.image_device.
     * 
     * @return the imageDevice of this Image
     */
    OptionalInt getImageDevice();
    
    /**
     * Sets the imageId of this Image. The imageId field corresponds to the
     * database column ACS.ACS.Image.imageId.
     * 
     * @param imageId to set of this Image
     * @return        this Image instance
     */
    Image setImageId(int imageId);
    
    /**
     * Sets the image of this Image. The image field corresponds to the database
     * column ACS.ACS.Image.image.
     * 
     * @param image to set of this Image
     * @return      this Image instance
     */
    Image setImage(Blob image);
    
    /**
     * Sets the timeStamp of this Image. The timeStamp field corresponds to the
     * database column ACS.ACS.Image.timeStamp.
     * 
     * @param timeStamp to set of this Image
     * @return          this Image instance
     */
    Image setTimeStamp(Timestamp timeStamp);
    
    /**
     * Sets the imageDevice of this Image. The imageDevice field corresponds to
     * the database column ACS.ACS.Image.image_device.
     * 
     * @param imageDevice to set of this Image
     * @return            this Image instance
     */
    Image setImageDevice(Integer imageDevice);
    
    /**
     * Queries the specified manager for the referenced Device. If no such
     * Device exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Device> findImageDevice(Manager<Device> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Image> {
        
        IMAGE_ID     ("imageId"),
        IMAGE        ("image"),
        TIME_STAMP   ("timeStamp"),
        IMAGE_DEVICE ("image_device");
        
        private final String columnId;
        private final TableIdentifier<Image> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "Image";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Image> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}