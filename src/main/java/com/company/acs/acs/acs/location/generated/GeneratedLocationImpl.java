package com.company.acs.acs.acs.location.generated;

import com.company.acs.acs.acs.location.Location;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.location.Location}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedLocationImpl implements Location {
    
    private int locationId;
    private String lName;
    private String lType;
    private int devicesGuardGuardId;
    
    protected GeneratedLocationImpl() {}
    
    @Override
    public int getLocationId() {
        return locationId;
    }
    
    @Override
    public Optional<String> getLName() {
        return Optional.ofNullable(lName);
    }
    
    @Override
    public Optional<String> getLType() {
        return Optional.ofNullable(lType);
    }
    
    @Override
    public int getDevicesGuardGuardId() {
        return devicesGuardGuardId;
    }
    
    @Override
    public Location setLocationId(int locationId) {
        this.locationId = locationId;
        return this;
    }
    
    @Override
    public Location setLName(String lName) {
        this.lName = lName;
        return this;
    }
    
    @Override
    public Location setLType(String lType) {
        this.lType = lType;
        return this;
    }
    
    @Override
    public Location setDevicesGuardGuardId(int devicesGuardGuardId) {
        this.devicesGuardGuardId = devicesGuardGuardId;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("locationId = "          + Objects.toString(getLocationId()));
        sj.add("lName = "               + Objects.toString(OptionalUtil.unwrap(getLName())));
        sj.add("lType = "               + Objects.toString(OptionalUtil.unwrap(getLType())));
        sj.add("devicesGuardGuardId = " + Objects.toString(getDevicesGuardGuardId()));
        return "LocationImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Location)) { return false; }
        final Location thatLocation = (Location)that;
        if (this.getLocationId() != thatLocation.getLocationId()) { return false; }
        if (!Objects.equals(this.getLName(), thatLocation.getLName())) { return false; }
        if (!Objects.equals(this.getLType(), thatLocation.getLType())) { return false; }
        if (this.getDevicesGuardGuardId() != thatLocation.getDevicesGuardGuardId()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getLocationId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLType()));
        hash = 31 * hash + Integer.hashCode(getDevicesGuardGuardId());
        return hash;
    }
}