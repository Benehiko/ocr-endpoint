package com.company.acs.acs.acs.numberplate.generated;

import com.company.acs.acs.acs.image.Image;
import com.company.acs.acs.acs.numberplate.Numberplate;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.numberplate.Numberplate}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedNumberplateImpl implements Numberplate {
    
    private int numberplateId;
    private String numberplatestring;
    private Timestamp time;
    private int numberplateImage;
    
    protected GeneratedNumberplateImpl() {}
    
    @Override
    public int getNumberplateId() {
        return numberplateId;
    }
    
    @Override
    public String getNumberplatestring() {
        return numberplatestring;
    }
    
    @Override
    public Timestamp getTime() {
        return time;
    }
    
    @Override
    public int getNumberplateImage() {
        return numberplateImage;
    }
    
    @Override
    public Numberplate setNumberplateId(int numberplateId) {
        this.numberplateId = numberplateId;
        return this;
    }
    
    @Override
    public Numberplate setNumberplatestring(String numberplatestring) {
        this.numberplatestring = numberplatestring;
        return this;
    }
    
    @Override
    public Numberplate setTime(Timestamp time) {
        this.time = time;
        return this;
    }
    
    @Override
    public Numberplate setNumberplateImage(int numberplateImage) {
        this.numberplateImage = numberplateImage;
        return this;
    }
    
    @Override
    public Image findNumberplateImage(Manager<Image> foreignManager) {
        return foreignManager.stream().filter(Image.IMAGE_ID.equal(getNumberplateImage())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("numberplateId = "     + Objects.toString(getNumberplateId()));
        sj.add("numberplatestring = " + Objects.toString(getNumberplatestring()));
        sj.add("time = "              + Objects.toString(getTime()));
        sj.add("numberplateImage = "  + Objects.toString(getNumberplateImage()));
        return "NumberplateImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Numberplate)) { return false; }
        final Numberplate thatNumberplate = (Numberplate)that;
        if (this.getNumberplateId() != thatNumberplate.getNumberplateId()) { return false; }
        if (!Objects.equals(this.getNumberplatestring(), thatNumberplate.getNumberplatestring())) { return false; }
        if (!Objects.equals(this.getTime(), thatNumberplate.getTime())) { return false; }
        if (this.getNumberplateImage() != thatNumberplate.getNumberplateImage()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getNumberplateId());
        hash = 31 * hash + Objects.hashCode(getNumberplatestring());
        hash = 31 * hash + Objects.hashCode(getTime());
        hash = 31 * hash + Integer.hashCode(getNumberplateImage());
        return hash;
    }
}