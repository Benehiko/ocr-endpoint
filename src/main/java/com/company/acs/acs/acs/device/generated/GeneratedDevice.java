package com.company.acs.acs.acs.device.generated;

import com.company.acs.acs.acs.device.Device;
import com.company.acs.acs.acs.location.Location;
import com.company.acs.acs.acs.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.acs.acs.acs.device.Device}-interface representing entities of the
 * {@code Device}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedDevice {
    
    /**
     * This Field corresponds to the {@link Device} field that can be obtained
     * using the {@link Device#getDeviceId()} method.
     */
    IntField<Device, Integer> DEVICE_ID = IntField.create(
        Identifier.DEVICE_ID,
        Device::getDeviceId,
        Device::setDeviceId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Device} field that can be obtained
     * using the {@link Device#getMac()} method.
     */
    StringField<Device, String> MAC = StringField.create(
        Identifier.MAC,
        Device::getMac,
        Device::setMac,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Device} field that can be obtained
     * using the {@link Device#getAlias()} method.
     */
    StringField<Device, String> ALIAS = StringField.create(
        Identifier.ALIAS,
        Device::getAlias,
        Device::setAlias,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Device} field that can be obtained
     * using the {@link Device#getDeviceLocation()} method.
     */
    ComparableForeignKeyField<Device, Integer, Integer, Location> DEVICE_LOCATION = ComparableForeignKeyField.create(
        Identifier.DEVICE_LOCATION,
        o -> OptionalUtil.unwrap(o.getDeviceLocation()),
        Device::setDeviceLocation,
        Location.LOCATION_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Device} field that can be obtained
     * using the {@link Device#getDeviceUser()} method.
     */
    ComparableForeignKeyField<Device, Integer, Integer, User> DEVICE_USER = ComparableForeignKeyField.create(
        Identifier.DEVICE_USER,
        o -> OptionalUtil.unwrap(o.getDeviceUser()),
        Device::setDeviceUser,
        User.USER_ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the deviceId of this Device. The deviceId field corresponds to
     * the database column ACS.ACS.Device.deviceId.
     * 
     * @return the deviceId of this Device
     */
    int getDeviceId();
    
    /**
     * Returns the mac of this Device. The mac field corresponds to the database
     * column ACS.ACS.Device.mac.
     * 
     * @return the mac of this Device
     */
    String getMac();
    
    /**
     * Returns the alias of this Device. The alias field corresponds to the
     * database column ACS.ACS.Device.alias.
     * 
     * @return the alias of this Device
     */
    String getAlias();
    
    /**
     * Returns the deviceLocation of this Device. The deviceLocation field
     * corresponds to the database column ACS.ACS.Device.device_location.
     * 
     * @return the deviceLocation of this Device
     */
    OptionalInt getDeviceLocation();
    
    /**
     * Returns the deviceUser of this Device. The deviceUser field corresponds
     * to the database column ACS.ACS.Device.device_user.
     * 
     * @return the deviceUser of this Device
     */
    OptionalInt getDeviceUser();
    
    /**
     * Sets the deviceId of this Device. The deviceId field corresponds to the
     * database column ACS.ACS.Device.deviceId.
     * 
     * @param deviceId to set of this Device
     * @return         this Device instance
     */
    Device setDeviceId(int deviceId);
    
    /**
     * Sets the mac of this Device. The mac field corresponds to the database
     * column ACS.ACS.Device.mac.
     * 
     * @param mac to set of this Device
     * @return    this Device instance
     */
    Device setMac(String mac);
    
    /**
     * Sets the alias of this Device. The alias field corresponds to the
     * database column ACS.ACS.Device.alias.
     * 
     * @param alias to set of this Device
     * @return      this Device instance
     */
    Device setAlias(String alias);
    
    /**
     * Sets the deviceLocation of this Device. The deviceLocation field
     * corresponds to the database column ACS.ACS.Device.device_location.
     * 
     * @param deviceLocation to set of this Device
     * @return               this Device instance
     */
    Device setDeviceLocation(Integer deviceLocation);
    
    /**
     * Sets the deviceUser of this Device. The deviceUser field corresponds to
     * the database column ACS.ACS.Device.device_user.
     * 
     * @param deviceUser to set of this Device
     * @return           this Device instance
     */
    Device setDeviceUser(Integer deviceUser);
    
    /**
     * Queries the specified manager for the referenced Location. If no such
     * Location exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Location> findDeviceLocation(Manager<Location> foreignManager);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<User> findDeviceUser(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Device> {
        
        DEVICE_ID       ("deviceId"),
        MAC             ("mac"),
        ALIAS           ("alias"),
        DEVICE_LOCATION ("device_location"),
        DEVICE_USER     ("device_user");
        
        private final String columnId;
        private final TableIdentifier<Device> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "ACS";
        }
        
        @Override
        public String getSchemaId() {
            return "ACS";
        }
        
        @Override
        public String getTableId() {
            return "Device";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Device> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}