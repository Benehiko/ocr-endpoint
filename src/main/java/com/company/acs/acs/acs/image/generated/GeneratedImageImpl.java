package com.company.acs.acs.acs.image.generated;

import com.company.acs.acs.acs.device.Device;
import com.company.acs.acs.acs.image.Image;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.image.Image}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedImageImpl implements Image {
    
    private int imageId;
    private Blob image;
    private Timestamp timeStamp;
    private int imageDevice;
    
    protected GeneratedImageImpl() {}
    
    @Override
    public int getImageId() {
        return imageId;
    }
    
    @Override
    public Blob getImage() {
        return image;
    }
    
    @Override
    public Timestamp getTimeStamp() {
        return timeStamp;
    }
    
    @Override
    public int getImageDevice() {
        return imageDevice;
    }
    
    @Override
    public Image setImageId(int imageId) {
        this.imageId = imageId;
        return this;
    }
    
    @Override
    public Image setImage(Blob image) {
        this.image = image;
        return this;
    }
    
    @Override
    public Image setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }
    
    @Override
    public Image setImageDevice(int imageDevice) {
        this.imageDevice = imageDevice;
        return this;
    }
    
    @Override
    public Device findImageDevice(Manager<Device> foreignManager) {
        return foreignManager.stream().filter(Device.DEVICE_ID.equal(getImageDevice())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("imageId = "     + Objects.toString(getImageId()));
        sj.add("image = "       + Objects.toString(getImage()));
        sj.add("timeStamp = "   + Objects.toString(getTimeStamp()));
        sj.add("imageDevice = " + Objects.toString(getImageDevice()));
        return "ImageImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Image)) { return false; }
        final Image thatImage = (Image)that;
        if (this.getImageId() != thatImage.getImageId()) { return false; }
        if (!Objects.equals(this.getImage(), thatImage.getImage())) { return false; }
        if (!Objects.equals(this.getTimeStamp(), thatImage.getTimeStamp())) { return false; }
        if (this.getImageDevice() != thatImage.getImageDevice()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getImageId());
        hash = 31 * hash + Objects.hashCode(getImage());
        hash = 31 * hash + Objects.hashCode(getTimeStamp());
        hash = 31 * hash + Integer.hashCode(getImageDevice());
        return hash;
    }
}