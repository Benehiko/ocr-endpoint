package com.company.acs.acs.acs.fleetvehicle.generated;

import com.company.acs.acs.acs.fleetvehicle.FleetVehicle;
import com.company.acs.acs.acs.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.acs.acs.acs.fleetvehicle.FleetVehicle}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFleetVehicleImpl implements FleetVehicle {
    
    private int vehicleId;
    private String numberplate;
    private int fleetUser;
    
    protected GeneratedFleetVehicleImpl() {}
    
    @Override
    public int getVehicleId() {
        return vehicleId;
    }
    
    @Override
    public String getNumberplate() {
        return numberplate;
    }
    
    @Override
    public int getFleetUser() {
        return fleetUser;
    }
    
    @Override
    public FleetVehicle setVehicleId(int vehicleId) {
        this.vehicleId = vehicleId;
        return this;
    }
    
    @Override
    public FleetVehicle setNumberplate(String numberplate) {
        this.numberplate = numberplate;
        return this;
    }
    
    @Override
    public FleetVehicle setFleetUser(int fleetUser) {
        this.fleetUser = fleetUser;
        return this;
    }
    
    @Override
    public User findFleetUser(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getFleetUser())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("vehicleId = "   + Objects.toString(getVehicleId()));
        sj.add("numberplate = " + Objects.toString(getNumberplate()));
        sj.add("fleetUser = "   + Objects.toString(getFleetUser()));
        return "FleetVehicleImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof FleetVehicle)) { return false; }
        final FleetVehicle thatFleetVehicle = (FleetVehicle)that;
        if (this.getVehicleId() != thatFleetVehicle.getVehicleId()) { return false; }
        if (!Objects.equals(this.getNumberplate(), thatFleetVehicle.getNumberplate())) { return false; }
        if (this.getFleetUser() != thatFleetVehicle.getFleetUser()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getVehicleId());
        hash = 31 * hash + Objects.hashCode(getNumberplate());
        hash = 31 * hash + Integer.hashCode(getFleetUser());
        return hash;
    }
}